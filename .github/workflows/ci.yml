name: CI / CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: PHPUnit (Symfony)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        ports: [ "5432:5432" ]
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: sandbox_cinephoria_test
        options: >-
          --health-cmd="pg_isready -U app -d sandbox_cinephoria_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

      mongo:
        image: mongo:6
        ports: [ "27017:27017" ]
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    env:
      APP_ENV: test
      APP_DEBUG: 1
      KERNEL_CLASS: App\Kernel
      TRUSTED_HOSTS: ^.*$
      TRUSTED_PROXIES: 127.0.0.1,REMOTE_ADDR
      DATABASE_URL: postgresql://app:admin@127.0.0.1:5432/sandbox_cinephoria_test?serverVersion=16&charset=utf8
      MONGODB_URI: mongodb://127.0.0.1:27017
      MONGODB_DB: cinephoria
      MONGODB_COLLECTION: reservations
      MAILER_DSN: smtp://localhost:1025?encryption=null&auth_mode=null
      MAILER_FROM: "Cinephoria <no-reply@cinephoria.test>"
      APP_SECRET: 00000000000000000000000000000000

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: intl, mbstring, pdo_pgsql, pgsql, json, zip
          coverage: none
          tools: composer:v2, pecl

      - name: Force MongoDB extension 1.15.0 (matches composer.lock)
        run: |
          sudo rm -f /etc/php/8.2/cli/conf.d/*mongodb*.ini || true
          (printf "yes\n" | sudo pecl uninstall mongodb) || true
          printf "\n" | sudo pecl install mongodb-1.15.0
          echo "extension=mongodb.so" | sudo tee /etc/php/8.2/cli/conf.d/20-mongodb.ini
          php -r "echo 'mongodb ext version: ', phpversion('mongodb'), PHP_EOL;"

      - name: Composer cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/composer/files
            vendor
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Wait for Postgres (port check)
        run: |
          for i in {1..60}; do
            nc -z 127.0.0.1 5432 && echo "Postgres is up" && break
            echo "Waiting Postgres..."
            sleep 1
          done

      - name: Wait for Mongo (port check)
        run: |
          for i in {1..60}; do
            nc -z 127.0.0.1 27017 && echo "Mongo is up" && break
            echo "Waiting Mongo..."
            sleep 1
          done

      - name: Prepare test database (Doctrine migrations)
        run: |
          php bin/console doctrine:database:create --env=test || true
          php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: Run PHPUnit (Unit + Functional)
        run: |
          rm -rf var/cache/test
          php -d variables_order=EGPCS bin/phpunit

  deploy_staging:
    name: Deploy to Fly.io (staging)
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy (staging)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "ðŸš€ Deploying STAGING"
          flyctl deploy --app cinephoria-web-staging --remote-only --build-arg BUILD_ENV=staging

      - name: Smoke test (staging)
        run: |
          # Remplace /health par une route lÃ©gÃ¨re qui renvoie 200
          curl -fsS https://cinephoria-web-staging.fly.dev/health || exit 1

  deploy:
    name: Deploy to Fly.io (production)
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy (production)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "ðŸš€ Deploying PRODUCTION"
          flyctl deploy --app cinephoria-web --remote-only --build-arg BUILD_ENV=prod

      - name: Smoke test (production)
        run: |
          # Remplace /health par une route lÃ©gÃ¨re qui renvoie 200
          curl -fsS https://cinephoria-web.fly.dev/health || exit 1
