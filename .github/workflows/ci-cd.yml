name: CI/CD Cinéphoria

on:
  push:
    branches: [ develop, main, 'feature/**' ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test:
    name: Build & Tests (PHPUnit)
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start stack (detached)
        run: |
          docker compose up -d --build
          # attendre Postgres
          until docker compose exec -T database pg_isready -U app -d app; do sleep 1; done

      - name: Prepare sandbox DB
        run: |
          docker compose exec -T database psql -U app -d postgres -c "DROP DATABASE IF EXISTS sandbox_cinephoria_test;"
          docker compose exec -T database psql -U app -d postgres -c "CREATE DATABASE sandbox_cinephoria_test;"
          cat db/schema.sql | docker compose exec -T database psql -U app -d sandbox_cinephoria_test
          cat db/data.sql   | docker compose exec -T database psql -U app -d sandbox_cinephoria_test

      - name: Composer install (inside container)
        run: docker compose exec -T php composer install --no-interaction --prefer-dist --no-progress

      - name: Run PHPUnit
        env:
          APP_ENV: test
          # IMPORTANT : en CI, on force l’hôte DB à "database" (service compose),
          # peu importe ce qu’il y a dans phpunit.xml.dist local.
          DATABASE_URL: 'postgresql://app:admin@database:5432/sandbox_cinephoria_test?serverVersion=16&charset=utf8'
        run: docker compose exec -T php ./vendor/bin/phpunit

      - name: Teardown
        if: always()
        run: docker compose down -v

  deploy:
    name: Déploiement sur le VPS Hostinger
    runs-on: ubuntu-22.04
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy via SSH
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          cd /var/www/html
          docker compose pull
          docker compose down
          docker compose up -d --build
          EOF
